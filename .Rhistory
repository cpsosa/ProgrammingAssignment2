new.df
cbind(baskets.df, new.df)
baskets.list <- list(basket.team, '2010-2011')
baskets.list <- list(baskets.team, '2010-2011')
baskets.list
baskets.nlist <- list(scores=baskets.team, season='2010-2011')
baskets.nlist
names(baskets.nlist)
length(baskets.list)
baskets.list[[]]
baskets.list[[1]]
baskets.nlist[['scores']]
baskets.list[-1]
baskets.nlist[names(baskeets.nlist)=='season']
baskets.nlist[names(baskets.nlist)=='season']
baskets.nlist[[1]] <- baskets.df
baskets.nlist
baskets.nlist[['scores']] <- baskets.df
baskets.nlist$scores <- baskets.df
baskets.nlist
baskets.nlist[1] <- list(baskets.df)
baskets.nlist
baskets.list[1:2]<- list(baskets.df, '2009-2010')
baskets.nlist
baskets.nlist[[1]] <- NULL
baskets.nlist
baskets.nlist <- list(scores=baskets.df, season='2010-2011')
baskets.nlist
baskets.nlist ('scores') <- list(NULL)
baskets.nlist ['scores'] <- list(NULL)
baskets.nlist
baskets.nlist$players <- c('granny', 'geraldine')
baskets.nlist
baskets.list <- list(baskets.team, '2010-2011')
players <- list(rownames(basket.team))
players <- list(rownames(baskets.team))
players
c(baskets.team, players)
str(baskets.list)
str(baskets.nlist)
new.numbers <- c(0.8223, 0.02487, 1.62, 0.4)
addPercent(new.numbers)
addPercent <- function(x) {
percent <- round(x * 100, digits = 1)
result <- paste(percent, "%", sep = "")
return(result)
}
addPercent(new.numbers)
priceCalculator <- function(hours, pph=40){net.price}
priceCalculator <- function(hours, pph=40){
net.price <- hours * pph
round(net.price)
}
priceCalculator(40)
source('~/.active-rstudio-document')
priceCalculator
priceCalculator(hours=55)
priceCalculator(hours=110)
if (hours > 100) net.price <- net.price * 0.9
hours < - 110
hours <- 110
if (hours > 100) net.price <- net.price * 0.9
?'if'
?"if"
source('~/.active-rstudio-document')
priceCalculator(25,public=TRUE)
priceCalculator(25,public=FALSE)
priceCalculator()
priceCalculator
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
priceCalculator(25,public=TRUE)
priceCalculator(25,public=FALSE)
source('~/.active-rstudio-document')
priceCalculator(25,public=TRUE)
priceCalculator(25,public=FALSE)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
priceCalculator(25,public=TRUE)
priceCalculator(25,public=FALSE)
source('~/.active-rstudio-document')
priceCalculator(25,public=TRUE)
source('~/.active-rstudio-document')
priceCalculator(25,public=TRUE)
priceCalculator(25,public=FALSE)
priceCalculator(c(25,110))
priceCalculator(110)
ifelse(c(1,3) < 2.5, 1:2, 5:6)
my.hours <- c(25,110)
my.hours * 40 * ifelse(my.hours > 100, 0.9, 1)
clients <- data.frame(hours = c(25, 110, 125, 40), public = c(TRUE,TRUE,FALSE,FALSE))
clients
with(clietns, priceCalculators(hours, public = public))
with(clients, priceCalculators(hours, public = public))
with(clients, priceCalculator(hours, public = public))
source('~/.active-rstudio-document')
with(clients, priceCalculator(hours, public = public))
source('~/.active-rstudio-document')
with(clients, priceCalculator(hours, public = public))
VAT <- switch(client, private=1.12, public=1.06, abroad=1)
source('~/.active-rstudio-document')
clients$type <- c('public', 'abroad', 'private', 'abroad')
clients <- data.frame(hours=c(25,110,125,40), public=c(TRUE, TRUE, FALSE, FALSE))
clients$type <- c('public', 'abroad', 'private', 'abroad')
priceCalculator(clients$hours, client=clients$type)
priceCalculator(clients$hours, client=clients$type)
source('~/.active-rstudio-document')
priceCalculator(clients$hours, client=clients$type)
songline <- 'Get out of my dreams...'
for(songline in 1:5) print('...Get into my car!')
songline
counts <- matrix(c(3,2,4,6,5,1,8,6,1), ncol=3)
colnames(counts) <- c('sparrow','dove','crow')
counts
apply(counts,2,max)
counts[2,2} <- NA
counts[2,2] <- NA
apply(counts,2,max)
apply(counts,2,max, na.rm=TRUE)
sapply(c('a','b'), switch, a='Hello', b='Goodbye')
'a' + 1
data.frame(1:10, 10:1,)
x <- 1:10
y <- if (x < 5) 0 else 1
x <- 4
sqrt(x-5)
plot(1:10, 10:1, color='green')
source('~/.active-rstudio-document')
warnings()
source('~/.active-rstudio-document')
logitpercent('50%')
traceback()
debug(logit)
logitpercent('50%')
str(x)
logitpercent('50%')
str(x)
source('~/.active-rstudio-document')
debug(logit)
undebug(logit)
logitpercent('50%')
x
str(x)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
undebug(logit)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
logitpercent('50%','150%')
logitpercent(c('50%','150%'))
??date
RSiteSearch('cluster analysis')
set.seed(1)
x <- rnorm(5)
x
elements <- data.frame()
elements <- edit(elements)
str(islands)
islands[]
islands[5]
islands[1]
head(islands)
islands[c(8,1,1,42)]
iris[1:5]
iris[1:5,]
iris[,1:2]
iris[,c("Sepal.Lengths", "Sepal.width")]
iris[,c("Sepal.Lengths", "Sepal.Width")]
iris[,c("Sepal.Length", "Sepal.Width")]
iris[,'Sepal.Length']
iris[,'Sepal.Length', drop=FALSE]
iris['Sepal.Length']
iris[1:5, c('Sepal.Length', 'Sepal.Width')]
?sample
sample(1:5, 10, replace=TRUE)
sample(1:5, 10, replace=FALSE)
set.seed(1)
sample(1:6, 10, replace=TRUE)
sample(1:6, 10, replace=TRUE)
set.seed(1)
sample(1:6, 10, replace=TRUE)
nrow(iris)
ncol(iris)
set.seed(123)
index <- sample(1:nrow(iris), 5)
index
iris[index.]
iris[index, ]
duplicate(c(1,2,1,3,1,4))
duplicated(c(1,2,1,3,1,4))
duplicted(iris)
duplicated(iris)
which(duplicated(iris))
iris(!duplicated), ]
iris[(!duplicated), ]
iris[(!duplicated(iris)), ]
index <- which(duplicated(iris))
iris[-index]
which(duplicated(iris))
iris[-index]
index
str(airquality)
complete.cases(airquality)
x <- airquality[complete.cases(airquality), ]
str(x)
x <- na.omit(airquality)
str(x)
x
x <- iris$Sepal.Length / iris.$Sepal.Width
iris
iris$Sepal.Length
iris$sepal.Width
iris$Sepal.Width
iris$Sepal.Length / iris$Sepal.Width
x <- iris$Sepal.Length / iris$Sepal.Width
x
head(x)
y <- with(iris, Sepal.Length / Sepal.Width)
y
identical(x,y)
iris <- within(iris, ratio <- Sepal.Length / Sepal.Width)
head(iris$ratio)
head(state.x77)
forst <- state.x77[, "Frost"]
head(frost,5)
frost <- state.x77[, "Frost"]
head(frost,5)
cut(frost, 3, include.lowest=TRUE)
cut(frost, 3, include.lowest=TRUE, labels=c("Low", "Med", "High"))
table(x)
x <- cut(frost, 3, include.lowest=TRUE, labels=c("Low", "Med", "High"))
tablex(x)
table(x)
all.states <- as.data(state.x77)
all.states <- as.data.frame(state.x77)
all.states$Name <- rownames(state.x77)
all.state$Name
all.states$Name
nrow(all.state$Name)
nrow(all.states$Name)
nrow(states.x77)
nrow(state.x77)
rownames(all.states) <- NULL
str(all.states)
cold.states <- all.states[all.states$Frost > 150, c("Name", "Area")]
cold.states
large.states <- all.states[all.states$Area >= 100000, c("Name", "Area")]
large.states
merge(cold.states, large.sates)
merge(cold.states, large.states)
merge(cold.states, large.staes, all=TRUE)
merge(cold.states, large.states, all=TRUE)
cold.states
cold.states <- all.sates[all.states$Frost > 150, c("Name", "Frost")]
cold.states <- all.states[all.states$Frost > 150, c("Name", "Frost")]
cold.states
merge(cold.states, large.states, all=TRUE)
index <- match(cold.states$Name, large.states$Name)
index
large.states[na.omit(index),]
index <- cold.states$Name %in% large.states$Name
index
!is.na(match(cold.states$Name, large.states$Name))
cold.states(index)
cold.states[index,]
some.states <- data.frame(Region = state.region, state.x77)
some.states <- some.states[1:10, 1:3]
some.states
sort(some.states$Population)
sort(some.states$Population, drop=FALSE)
sort(some.states$Population, decreasing=TRUE)
?order
order.pop <- order(some.states$Population)
some.states$Population
some.states
some.states$Population[order.pop]
some.states[order.pop,]
order(some.states$Population)
order(some.states$Population, decreasing=TRUE)
index <- with(some.states, order(Region, Population))
some.states[index,]
str(titanic)
str(Titanic)
apply(Titanic, 3, sum)
apply(Titanic, 3, sum)
apply(Titanic, 1, sum)
apply(Titanic, c(3,4), sum)
head(Titanic)
head(Titanic, drop=FALSE)
lapply(iris, class)
sapply(iris, mean)
str(iris)
sapply(iris,class)
sapply(iris, function(x) ifelse(is.numeric(x), mean(x), NA))
tapply(iris$Sepal.Length, iris$Species, mean)
head(iris)
head
?head
head(iris, n=3)
with(iris, tapply(Sepal.Length, Species, mean))
str(mtcars)
cars <- within(mtcars, am <- factor(am, levels=0:1, labels=c("Automatic", "Manual")))
with(cars, tapply(mpg, am, mean))
with(cars, tapply(mpg, am, mean))
with(cars, tapply(mpg, list(gear, am), mean))
with(cars, aggregate(mpg, list(gear=gear, am=am), mean))
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
q()
corr <- function(directory, threshold = 0) {
# Get all the file names in directory.
files_list <- list.files(directory, full.names=TRUE)
dat <- data.frame()
for (i in id) {
#Create a concatenated dat data frame.
dat <- rbind(dat, read.csv(files_list[i]))
}
# Now select the pollutant and compute the mean.
#if (pollutant == "sulfate") {
#  dat_sulfate <- dat[, "sulfate"]
#  bad <- is.na(dat_sulfate)
#  dat_sulfate_clean <- dat_sulfate[!bad]
#} else {
#  dat_nitrate <- dat[,"nitrate"]
#  bad <- is.na(dat_nitrate)
#  dat_nitrate_clean <- dat_nitrate[!bad]
#}
}
corr
cr <- corr("specdata", 150)
corr <- function(directory, threshold = 0) {
# Get all the file names in directory.
files_list <- list.files(directory, full.names=TRUE)
dat <- data.frame()
for (i in id) {
#Create a concatenated dat data frame.
dat <- rbind(dat, read.csv(files_list[i]))
}
# Now select the pollutant and compute the mean.
#if (pollutant == "sulfate") {
#  dat_sulfate <- dat[, "sulfate"]
#  bad <- is.na(dat_sulfate)
#  dat_sulfate_clean <- dat_sulfate[!bad]
#} else {
#  dat_nitrate <- dat[,"nitrate"]
#  bad <- is.na(dat_nitrate)
#  dat_nitrate_clean <- dat_nitrate[!bad]
#}
}
cr <- corr("specdata", 150)
pollutantmean <- function(directory, pollutant, id = 1:332 ){
}
pollutantmean <- function(directory, pollutant, id = 1:332 ){
# Get all the file names in directory.
files_list <- list.files(directory, full.names=TRUE)
dat <- data.frame()
for (i in id) {
#Create a concatenated dat data frame.
dat <- rbind(dat, read.csv(files_list[i]))
}
# Now select the pollutant and compute the mean.
if (pollutant == "sulfate") {
dat_subset <- dat[, "sulfate"]
compMean <- mean(dat_subset, na.rm=TRUE)
return(round(compMean, digits=3))
} else {
dat_subset <- dat[,"nitrate"]
compMean <- mean(dat_subset, na.rm=TRUE)
return(round(compMean, digits=3))
}
}
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean <- function(directory, pollutant, id = 1:332 ){
# Get all the file names in directory.
files_list <- list.files(directory, full.names=TRUE)
dat <- data.frame()
for (i in id) {
#Create a concatenated dat data frame.
dat <- rbind(dat, read.csv(files_list[i]))
}
# Now select the pollutant and compute the mean.
if (pollutant == "sulfate") {
dat_subset <- dat[, "sulfate"]
compMean <- mean(dat_subset, na.rm=TRUE)
return(round(compMean, digits=3))
} else {
dat_subset <- dat[,"nitrate"]
compMean <- mean(dat_subset, na.rm=TRUE)
return(round(compMean, digits=3))
}
}
pollutantmean("specdata", "sulfate", 1:10)
library(datasets)
data(iris)
?iris
iris$Sepal.Length
iris
iris[iris$Sepal.Length,101]
x<- iris[c(101:150),]
x
x<- iris[c(101:150),iris$Sepal.Length]
x<- iris[c(101:150),"Sepal.Length"]
x
mean(x)
iris
x
mean(x)
apply(iris, 2, mean)
colMeans(iris)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 2, mean)
data(mtcars)
split(mtcars, mtcars$cyl)
sapply(mtcars, cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
lapply(mtcars, mean)
mtcars$hp
head(mtcars)
mtcars$cyl
mtcars$hp
mtcars[cyl=8,]
mtcars["cyl","hp"]
mtcars["cyl",]
mtcars[,"cyl"]
mtcars[,"cyl"==4]
mtcars$cyl
mtcars$hp
head(mtcars)
mtcars
mtcars$cyl
mtcars$hp
mtcars$cyl < 6
x <- mtcars$cyl < 6
x
mtcars$cyl
mtcars$hp
cyl <- mtcars$cyl
hp <- mtcars$hp
cyl
length(cyl)
index <- 0
for i in 1:32 {
if (cyl[i]== 4) {
sum4 <- sum4 + hp[i]
index <- index + i
} else {
sum8 <- sum8 + hp[i]
}
diff <- sum8/index - sum4/index
}
for (i in 1:32) {
if (cyl[i]== 4) {
sum4 <- sum4 + hp[i]
index <- index + i
} else {
sum8 <- sum8 + hp[i]
}
diff <- sum8/index - sum4/index
}
for (i in 1:32) {
if (cyl[i]== 4) {
sum4 <- sum4 + hp[i]
index <- index + i
}
}
sum4 <- 0
hp
cyl[1]
for (i in 1:32) {
if (cyl[i]== 4) {
sum4 <- sum4 + hp[i]
index <- index + i
}
}
sum4
for (i in 1:32) {
if (cyl[i]== 4) {
sum4 <- sum4 + hp[i]
index <- index + i
print(cyl[i])
}
}
sum8 <- 0
for (i in 1:32) {
if (cyl[i]== 8) {
sum8 <- sum8 + hp[i]
index <- index + i
print(cyl[i])
}
}
sum8
2929 - 909
debug(ls)
ls
ls
setwd("R")
setwd("Coursera")
dir()
setwd("R")
dir()
setwd("project")
dir()
setwd('../repo')
dir()
setwd("ProgrammingAssignment2")
dir()
